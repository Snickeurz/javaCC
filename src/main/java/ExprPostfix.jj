/*
 * ExprPostfix.jj
 *
 * SIBAUD Nicolas - 2019
 *
 * Evaluateur d'expressions arithmetiques en JavaCC avec annotation post fixe.
 *
 */

PARSER_BEGIN(ExprPostfix)

    public class ExprPostfix {
	public static void main(String args[]) throws ParseException {
            ExprPostfix syn = new ExprPostfix(System.in);

            System.out.print("Entrer une expression: ");
            String res = syn.evalue();
            System.out.println("Resultat = " + res);
        }
    }

PARSER_END(ExprPostfix)


/* Partie syntaxique
 *
 * On ajoute une regle qui tient lieu d'axiome
 * pour s'assurer qu'il y a bien un \n a la fin de l'expression.
 *
 * Chaque regle retourne l'entier resultant de la sous-expression
 * qu'elle vient d'analyser.
 */

    // regle additionnelle: evalue -> expression \n
    // pour s'assurer qu'il y a bien un \n a la fin de l'expression
String evalue() :
                                            { String x; }
{
    x = expression() "\n"                   { return x; }
}


    // expression -> terme { + terme | - terme }
String expression() :
                                            { String x, y; }
{
    x = terme()
    (   "+"  y = terme()                    { x = x + " " + y + " +"; }
    |   "-"  y = terme()                    { x = x + " " + y + " -"; }
    )*
                                            { return x; }
}


    // terme -> facteur { * facteur | / facteur }
String terme() :
                                            { String x, y; }
{
    x = facteur()
    (   "*"  y = facteur()                  { x = x + " " + y + " *"; }
    |	"/"  y = facteur()                  { x = x + " " + y + " /"; }
    )*
                                            { return x; }
}
    // facteur -> ( expression ) | entier
String facteur():
                                            {String x; Token t;}
{
    ("(" x=expression() ")"
    |t=<ENTIER>                             {x = t.image;}
    )
                                            {return x;}
}

    // primaire -> ( expression ) | entier
String primaire() :
                                            { String x; Token t; }
{

    ( 	"("  x = expression()  ")"
    |   t = <ENTIER>                        { x = t.image; }
    )
                                            { return x; }
}


/* Partie lexicale
 *
 * Les unites constantes sont directement referencees dans les regles.
 * On ne decrit donc que les separateurs et les unites non constantes.
 */

SKIP :
{ " " | "\t" | "\r" }


TOKEN :
{
    < ENTIER: ( ["0"-"9"] )+ >
}

